//package Log
Before exit update.
//email
Package run end time: time
Carrier Code      Delivered   Returned      damaged     exception Not Delivered
//Azure error logs
create final error object and publish

//Adam2 
                                    1. Complete TPS
                                    2. Implement Saby correction
3. Insert in package log table before exit. Provide start, end time and exit log code.
4. Fire email report. Mandril.
5. Check and implement all api errors 
      to be treated as exceptions updated to DB as exceptionStatus as 1
6. Check all errors not tracking number specific errors go to error array
7. Azure log errors from error array
            8. Debug why sometimes app is not closing generously
5. Testing with special data
                                          6. Status update every 2 seconds while checking idle
7. Deployment scripts
8. Issues
      Handle database connection errors
      Api Queue < 0
      

GSO Delivery Status, options are:
IN TRANSIT                              inTransit
DELAYED                                 inTransit
DELIVERED                               delivered
RETURNED                                returned

Status Message of UPS:
Code       Desc
M          Order Processed                  orderProcessed
D          Delivered                        delivered
I          In Transit                       inTransit
X          Any issue [e.g. The receiver was not available at the time of the final delivery attempt/ A delivery change for this package is in progress. / The receiver will pick up the package at a UPS facility. etc]
                                            exception
P          Pickup Scan                      pickedUp

Status Message of Fedex:
AF:  At local FedEx facility                orderProcessed
AR: At local FedEx facility                 orderProcessed
CA: Shipment cancelled by sender            exception
DE: Delivery exception                      exception
DL: Delivered                               delivered
DP: Departed FedEx location                 inTransit
HA: Hold at location request accepted       inTransit
HP: Ready for recipient pickup              inTransit
IT: In transit                              inTransit
OC: Shipment information sent to FedEx      inTransit
OD: On FedEx vehicle for delivery           inTransit
PU: Picked up                               pickedUp
RR: Delivery option requested               inTransit
RS: Returning package to shipper            returned
HL: Ready for pickup                        readyForPickup


-------------------- Enable Application Insights----------

1. Go to Azure portal
2. Create a resource > Monitoring + Management > Application Insights.
3. Provide Name,Application Type,Resource Group,Location
4. Click Create
5. Select Overview> Essentials > copy Instrumentation Key
6. npm install applicationinsights --save
Code :
const appInsights = require("applicationinsights");
appInsights.setup("7c370e26-7a3b-4483-9bae-a0164986dbcf");
appInsights.start();
var telemetry = appInsights.defaultClient;
Logger.info = function (msg) {
    telemetry.trackTrace({message: 'Wineshiping message : '+ msg});
};

Process
1. Get first 5 digits of tracking no. That is account no. Get user name, password as per following logic
2. Get token by calling http get request with header. Token will be available in Token header of response. Body will have "authorized". https://api.gso.com/Rest/v1/token, Headers will be: AccountNumber,UserName, Password
3. Tracking info url is: https://api.gso.com/Rest/v1/TrackShipment?TrackingNumber=508741111116172&AccountNumber=50874. Two headers: 1) Token 2) Content-Type: application/json

UPS
If AccountNo = "50308" Then
            gsotrackrequest.AccountNumber = AccountNo
            userinfo.UserName = "Wineshipping"
            userinfo.Password = "WS50308"
        ElseIf AccountNo = "50874" Then
            gsotrackrequest.AccountNumber = AccountNo
            userinfo.UserName = "VintageLogistics"
            userinfo.Password = "VL50874"
        ElseIf AccountNo = "60278" Then
            gsotrackrequest.AccountNumber = AccountNo
            userinfo.UserName = "Wineshipping"
            userinfo.Password = "WS60278"
        ElseIf AccountNo = "11111" Then
            gsotrackrequest.AccountNumber = "50874"
            userinfo.UserName = "VintageLogistics"
            userinfo.Password = "VL50874"
        End If


https://api.gso.com/Rest/v1/token

USPS error:


For each and ever USPS tracking number, I am getting same error message. Previously we got data but now we are not able to get any data. Is it possible to check from your side and let us know.
Error message is:
A status update is not yet available on your package. It will be available when the shipper provides an update or the package is delivered to USPS. Check back soon. Sign up for Informed Delivery<SUP>&reg;</SUP> to receive notifications for packages addressed to you.


URL is: http://production.shippingapis.com/ShippingAPI.dll?API=TrackV2&XML=%3CTrackFieldRequest%20USERID=%22487WINES7756%22%3E%3CTrackID%20ID=%229400110200881650000000%22%3E%3C/TrackID%3E%3C/TrackFieldRequest%3E

// script for PackageHistory table
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[PackageHistory](
	[ID] [bigint] IDENTITY(1,1) NOT NULL,
	[rn] [varchar](50) NOT NULL,
	[TrackingNumber] [varchar](50) NOT NULL,
	[ShippingAgentCode] [varchar](50) NOT NULL,
	[ActivityJson] [nvarchar](MAX) NULL,
	[IsDeleted] [bit] NOT NULL,
 CONSTRAINT [PK_PackageHistory] PRIMARY KEY CLUSTERED 
(
	[ID] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PackageHistory] ADD  DEFAULT ((0)) FOR [IsDeleted]
GO


CREATE TABLE [dbo].[PackageLog](
	[Id] [bigint] IDENTITY(1,1) NOT NULL,
	[ApiRequests] [int] NOT NULL,
	[ApiResponses] [int] NOT NULL,
	[ApiErrors] [int] NOT NULL,
	[DbRequests] [int] NOT NULL,
	[DbResponses] [int] NOT NULL,
	[DbErrors] [int] NOT NULL,
	[StartTime] [varchar](50) NULL,
	[EndTime] [varchar](50) NULL,
	[Duration] [varchar](20) NULL,
 CONSTRAINT [PK_PackageLog] PRIMARY KEY CLUSTERED 
(
	[Id] ASC
)WITH (STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[PackageLog] ADD  CONSTRAINT [DF_Table_1_Apirequests]  DEFAULT ((0)) FOR [ApiRequests]
GO

ALTER TABLE [dbo].[PackageLog] ADD  CONSTRAINT [DF_PackageLog_ApiResponses]  DEFAULT ((0)) FOR [ApiResponses]
GO

ALTER TABLE [dbo].[PackageLog] ADD  CONSTRAINT [DF_PackageLog_ApiErrors]  DEFAULT ((0)) FOR [ApiErrors]
GO

ALTER TABLE [dbo].[PackageLog] ADD  CONSTRAINT [DF_PackageLog_DbRequests]  DEFAULT ((0)) FOR [DbRequests]
GO

ALTER TABLE [dbo].[PackageLog] ADD  CONSTRAINT [DF_PackageLog_DbResponses]  DEFAULT ((0)) FOR [DbResponses]
GO

ALTER TABLE [dbo].[PackageLog] ADD  CONSTRAINT [DF_PackageLog_DbErrors]  DEFAULT ((0)) FOR [DbErrors]
GO

///// columns in DB
Status:
Status_Date:            OK
Status_Time:            OK
EstimatedDeliveryDate:
CarrierStatusCode:
CarrierStatusMessage:
SignedForByName:        OK
ExceptionStatus:        Find logic: 0,1:int

RTS:                    Search in events message for return
RTSTrackingNo:          Find out
DAMAGE:                 Search damage word
DAMAGEMSG:              In the activity
StatusUpdated:          current date time

CREATE PROCEDURE [dbo].[UpdateTrackingStatus] 
      @ThreadNo INT
AS
BEGIN
      -- SET NOCOUNT ON added to prevent extra result sets from
      -- interfering with SELECT statements.
      SET NOCOUNT ON;

    -- Insert statements for procedure here
      --INSERT INTO dbo.PackageTrackStagingBackup
      --SELECT * FROM PackageTrackStaging

UPDATE T2
Set T2.[Status] = T1.[Status],
            T2.[Status_Date] = T1.[Status_Date],
            T2.[Status_Time] = T1.[Status_Time],
            T2.[EstimatedDeliveryDate] = T1.[EstimatedDeliveryDate],
            T2.[CarrierStatusCode] = T1.[CarrierStatusCode],
            T2.[CarrierStatusMessage] = T1.[CarrierStatusMessage],
            T2.[SignedForByName] = T1.[SignedForByName],
            T2.[ExceptionStatus] = 
            (
                  CASE 
                        WHEN T1.[ExceptionStatus] = 1 THEN 1
                        WHEN T2.[ExceptionStatus] = 0 THEN 0
                        WHEN T2.[ExceptionStatus] = 1 THEN 1
                  END
            ),
            T2.[RTS] =
            (
                  CASE
                        WHEN T1.[RTS] = 1 THEN 1
                        WHEN T2.[RTS] = 1 THEN 1
                        WHEN T2.[RTS] = 0 THEN 0
                  END
            ),
            T2.[RTSTrackingNo] = 
            (
                  CASE
                        WHEN T1.[RTSTrackingNo] <> '' THEN T1.[RTSTrackingNo]
                        WHEN T2.[RTSTrackingNo] <> '' THEN T2.[RTSTrackingNo]
                  ELSE ''
                  END
            ),
            T2.[DAMAGE] = 
            (
                  CASE
                        WHEN T1.[DAMAGE] = 1 THEN 1
                        WHEN T2.[DAMAGE] = 1 THEN 1
                        WHEN T2.[DAMAGE] = 0 THEN 0
                  END
            ),
            T2.[DAMAGEMSG] = 
            (
                  CASE
                        WHEN T1.[DAMAGEMSG] <> '' THEN T1.[DAMAGEMSG]
                        WHEN T2.[DAMAGEMSG] <> '' THEN T2.[DAMAGEMSG]
                  ELSE ''
                  END
            ),
            T2.[StatusUpdated] = getdate()
FROM [PackageTrackStaging] as T1
      JOIN [Wineshipping$Package Info] as T2
      ON T1.[External Tracking No_] = T2.[External Tracking No_]
      AND T1.[PackageNo] = T2.[No_]
      AND (UPPER(T1.[Status]) <> UPPER(T2.[Status])
      OR (T1.[EstimatedDeliveryDate] <> T2.[EstimatedDeliveryDate] AND
                  T1.[EstimatedDeliveryDate] <> '1900-01-01 00:00:00.000'
            )
      OR T1.[CarrierStatusCode] <> T2.[CarrierStatusCode]
      OR T1.[Status_Date] <> T2.[Status_Date]
      OR T1.[Status_Time] <> T2.[Status_Time]
      OR T1.[CarrierStatusMessage] <> T2.[CarrierStatusMessage]
      OR (T1.[ExceptionStatus] = 1 AND T2.[ExceptionStatus] = 0)
      OR (T1.[RTS] = 1 AND T2.[RTS] = 0)
      OR (T1.[DAMAGE] = 1 AND T2.[DAMAGE] = 0)  
            )
WHERE T1.[Company] = 'WS' AND T1.[ThreadNo] = @ThreadNo
RETURN @@ROWCOUNT

END
GO

select Status,
	Status_Date,
	Status_Time,
	EstimatedDeliveryDate,
	CarrierStatusCode,
	CarrierStatusMessage,
	SignedForByName,
	ExceptionStatus,
	RTS,
	RTSTrackingNo,
	DAMAGE,
	DAMAGEMSG
from Wineshipping$PackageInfoNew
where No_ = 'CONT-000005331'

update Wineshipping$PackageInfoNew
set Status = '',
	Status_Date = '',
	Status_Time = '',
	EstimatedDeliveryDate = '',
	CarrierStatusCode = '',
	CarrierStatusMessage = '',
	SignedForByName = '',
	ExceptionStatus= ''
where No_ = 'CONT-000005331'



////// handler.js

 email.sendmail();

           
